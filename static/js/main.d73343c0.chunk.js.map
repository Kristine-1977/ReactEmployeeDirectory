{"version":3,"sources":["logo.svg","utils/API.js","pages/home.js","App.js","reportWebVitals.js","index.js"],"names":["axios","get","Discover","state","employee","match","matchCount","loadNextPerson","API","then","res","setState","data","results","catch","err","console","log","this","className","map","emp","name","first","Component","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAAe,G,MAAA,IAA0B,kC,yDCI1B,EACM,WACb,OAAOA,IAAMC,IAAI,4C,OCyCVC,E,4MA3CbC,MAAQ,CACNC,SAAU,GACVC,OAAO,EACPC,WAAY,G,EAMdC,eAAiB,WACfC,IACGC,MAAK,SAAAC,GAAG,OACP,EAAKC,SAAS,CACZP,SAAUM,EAAIE,KAAKC,aAGtBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,uDAV9B,WACEG,KAAKX,mB,oBAYP,WACE,OACE,gCACE,oBAAIY,UAAU,gBACd,oBAAIA,UAAU,gBAGd,oBAAIA,UAAU,cAAd,gCAGA,gCACE,4BAIDD,KAAKf,MAAMC,SAASgB,KAAI,SAACC,GAAD,OACvB,6BAAKA,EAAIC,KAAKC,kB,GApCDC,aCcRC,MAdf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKO,IAAKC,EAAMR,UAAU,WAAWS,IAAI,SACzC,sCACO,8CADP,0BAGA,cAAC,EAAD,UCCOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d73343c0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from \"axios\";\r\n\r\n// Export an object containing methods we'll use for accessing the Random Person API\r\n\r\nexport default {\r\n    getRandomPerson: function () {\r\n        return axios.get(\"https://randomuser.me/api/?results=5000\");\r\n    },\r\n};\r\n","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\n\r\nclass Discover extends Component {\r\n  state = {\r\n    employee: [],\r\n    match: false,\r\n    matchCount: 0\r\n  };\r\n  // When the component mounts, load the next dog to be displayed\r\n  componentDidMount() {\r\n    this.loadNextPerson();\r\n  }\r\n  loadNextPerson = () => {\r\n    API.getRandomPerson()\r\n      .then(res =>\r\n        this.setState({\r\n          employee: res.data.results\r\n        })\r\n      )\r\n      .catch(err => console.log(err));\r\n  };\r\n  //{*/handleBtnClick={this.handleBtnClick}/>*/}\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"text-center\"></h1>\r\n        <h3 className=\"text-center\">\r\n\r\n        </h3>\r\n        <h1 className=\"text-center\">\r\n          employee directory\r\n            </h1>\r\n        <table>\r\n          <thead>\r\n\r\n          </thead>\r\n        </table>\r\n        {this.state.employee.map((emp) =>\r\n          <li>{emp.name.first}</li>\r\n        )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Discover;","import logo from './logo.svg';\nimport './App.css';\nimport Discover from \"./pages/home.js\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <Discover />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}